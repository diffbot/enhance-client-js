/**
 * Diffbot Enhance Service
 * Enhance is an API to find a person or organization in the Knowledge Graph using partial data
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: support@diffbot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkjobAccepted from '../com.diffbot.kg.enhance.openapi.model/BulkjobAccepted';
import BulkjobRecoveryStatusResponse from '../com.diffbot.kg.enhance.openapi.model/BulkjobRecoveryStatusResponse';
import BulkjobStatusResponse from '../com.diffbot.kg.enhance.openapi.model/BulkjobStatusResponse';
import RequestError from '../com.diffbot.kg.enhance.openapi.model/RequestError';

/**
* BulkEnhanceEndpoint service.
* @module com.diffbot.kg.enhance.openapi.invoker/com.diffbot.kg.enhance.openapi.api/BulkEnhanceEndpointApi
* @version v1.0.0
*/
export default class BulkEnhanceEndpointApi {

    /**
    * Constructs a new BulkEnhanceEndpointApi. 
    * @alias module:com.diffbot.kg.enhance.openapi.invoker/com.diffbot.kg.enhance.openapi.api/BulkEnhanceEndpointApi
    * @class
    * @param {module:com.diffbot.kg.enhance.openapi.invoker/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.diffbot.kg.enhance.openapi.invoker/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bulkjobStatus operation.
     * @callback module:com.diffbot.kg.enhance.openapi.invoker/com.diffbot.kg.enhance.openapi.api/BulkEnhanceEndpointApi~bulkjobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:com.diffbot.kg.enhance.openapi.invoker/com.diffbot.kg.enhance.openapi.model/BulkjobStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk Enhance Status Endpoint
     * Get status of a bulk Enhance job
     * @param {String} bulkjobId Bulkjob Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.token Diffbot Token
     * @param {module:com.diffbot.kg.enhance.openapi.invoker/com.diffbot.kg.enhance.openapi.api/BulkEnhanceEndpointApi~bulkjobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.diffbot.kg.enhance.openapi.invoker/com.diffbot.kg.enhance.openapi.model/BulkjobStatusResponse}
     */
    bulkjobStatus(bulkjobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bulkjobId' is set
      if (bulkjobId === undefined || bulkjobId === null) {
        throw new Error("Missing the required parameter 'bulkjobId' when calling bulkjobStatus");
      }

      let pathParams = {
        'bulkjobId': bulkjobId
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BulkjobStatusResponse;
      return this.apiClient.callApi(
        '/kg/enhance_endpoint/bulk/{bulkjobId}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enhanceBulkjob operation.
     * @callback module:com.diffbot.kg.enhance.openapi.invoker/com.diffbot.kg.enhance.openapi.api/BulkEnhanceEndpointApi~enhanceBulkjobCallback
     * @param {String} error Error message, if any.
     * @param {module:com.diffbot.kg.enhance.openapi.invoker/com.diffbot.kg.enhance.openapi.model/BulkjobAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk Enhance Endpoint
     * Enhance endpoint to find person or organization using partial data
     * @param {Object} opts Optional parameters
     * @param {String} opts.token Diffbot Token
     * @param {Array.<String>} opts.tag Tag
     * @param {String} opts.mode `mode=refresh` indicates that Diffbot will attempt to recrawl all the origins of the identified entity and reconstruct the returned entity from this refreshed data.
     * @param {String} opts.nonCanonicalFacts `nonCanonicalFacts=true` returns non-canonical facts.
     * @param {String} opts.jsonmode `jsonmode=extended` returns origin information for facts.
     * @param {String} opts.leadIQToken leadIQ token
     * @param {String} opts.rocketReachToken rocketReach token
     * @param {String} opts.webhookurl Webhook URL
     * @param {String} opts.xDiffbotRequestId Request UUID for tracking. If available, will be set on response.
     * @param {Array.<Object>} opts.requestBody Bulk query payload
     * @param {module:com.diffbot.kg.enhance.openapi.invoker/com.diffbot.kg.enhance.openapi.api/BulkEnhanceEndpointApi~enhanceBulkjobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.diffbot.kg.enhance.openapi.invoker/com.diffbot.kg.enhance.openapi.model/BulkjobAccepted}
     */
    enhanceBulkjob(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'tag': this.apiClient.buildCollectionParam(opts['tag'], 'multi'),
        'mode': opts['mode'],
        'nonCanonicalFacts': opts['nonCanonicalFacts'],
        'jsonmode': opts['jsonmode'],
        'leadIQToken': opts['leadIQToken'],
        'rocketReachToken': opts['rocketReachToken'],
        'webhookurl': opts['webhookurl']
      };
      let headerParams = {
        'X-Diffbot-RequestId': opts['xDiffbotRequestId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkjobAccepted;
      return this.apiClient.callApi(
        '/kg/enhance_endpoint/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pollBulkjob operation.
     * @callback module:com.diffbot.kg.enhance.openapi.invoker/com.diffbot.kg.enhance.openapi.api/BulkEnhanceEndpointApi~pollBulkjobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk Enhance Poll Endpoint
     * Poll a bulk Enhance job
     * @param {String} bulkjobId Bulkjob Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.token Diffbot Token
     * @param {String} opts.csvmode Return results as csv
     * @param {module:com.diffbot.kg.enhance.openapi.invoker/com.diffbot.kg.enhance.openapi.api/BulkEnhanceEndpointApi~pollBulkjobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    pollBulkjob(bulkjobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bulkjobId' is set
      if (bulkjobId === undefined || bulkjobId === null) {
        throw new Error("Missing the required parameter 'bulkjobId' when calling pollBulkjob");
      }

      let pathParams = {
        'bulkjobId': bulkjobId
      };
      let queryParams = {
        'token': opts['token'],
        'csvmode': opts['csvmode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/kg/enhance_endpoint/bulk/{bulkjobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopBulkjob operation.
     * @callback module:com.diffbot.kg.enhance.openapi.invoker/com.diffbot.kg.enhance.openapi.api/BulkEnhanceEndpointApi~stopBulkjobCallback
     * @param {String} error Error message, if any.
     * @param {module:com.diffbot.kg.enhance.openapi.invoker/com.diffbot.kg.enhance.openapi.model/BulkjobRecoveryStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulkjob stop
     * Stop an incomplete job
     * @param {String} bulkjobId Bulkjob Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.token Diffbot Token
     * @param {module:com.diffbot.kg.enhance.openapi.invoker/com.diffbot.kg.enhance.openapi.api/BulkEnhanceEndpointApi~stopBulkjobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.diffbot.kg.enhance.openapi.invoker/com.diffbot.kg.enhance.openapi.model/BulkjobRecoveryStatusResponse}
     */
    stopBulkjob(bulkjobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bulkjobId' is set
      if (bulkjobId === undefined || bulkjobId === null) {
        throw new Error("Missing the required parameter 'bulkjobId' when calling stopBulkjob");
      }

      let pathParams = {
        'bulkjobId': bulkjobId
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BulkjobRecoveryStatusResponse;
      return this.apiClient.callApi(
        '/kg/enhance_endpoint/bulk/{bulkjobId}/stop', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
